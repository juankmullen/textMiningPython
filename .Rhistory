data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
install.packages("psych")
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
install.packages("psych")
install.packages("corrplot")
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(corrplot)
corrplot(corr = cor(x = datos, method = "pearson"), method = "number")
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(corrplot)
corrplot(corr = cor(x = datos, method = "pearson"), method = "number")
equipos <- c("Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.",
"Milwaukee","Colorado","Houston","Baltimore","Los_An.","Chicago",
"Cincinnati","Los_P.","Philadelphia","Chicago","Cleveland","Arizona",
"Toronto","Minnesota","Florida","Pittsburgh","Oakland","Tampa",
"Atlanta","Washington","San.F","San.I","Seattle")
numero_bateos <- c(5659,  5710, 5563, 5672, 5532, 5600, 5518, 5447, 5544, 5598,
5585, 5436, 5549, 5612, 5513, 5579, 5502, 5509, 5421, 5559,
5487, 5508, 5421, 5452, 5436, 5528, 5441, 5486, 5417, 5421)
runs <- c(855, 875, 787, 730, 762, 718, 867, 721, 735, 615, 708, 644, 654, 735,
667, 713, 654, 704, 731, 743, 619, 625, 610, 645, 707, 641, 624, 570,
593, 556)
datos <- data.frame(equipos,numero_bateos,runs)
head(datos)
View(datos)
View(datos)
View(datos)
View(datos)
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(corrplot)
corrplot(corr = cor(x = datos, method = "pearson"), method = "number")
equipos <- c("Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.",
"Milwaukee","Colorado","Houston","Baltimore","Los_An.","Chicago",
"Cincinnati","Los_P.","Philadelphia","Chicago","Cleveland","Arizona",
"Toronto","Minnesota","Florida","Pittsburgh","Oakland","Tampa",
"Atlanta","Washington","San.F","San.I","Seattle")
numero_bateos <- c(5659,  5710, 5563, 5672, 5532, 5600, 5518, 5447, 5544, 5598,
5585, 5436, 5549, 5612, 5513, 5579, 5502, 5509, 5421, 5559,
5487, 5508, 5421, 5452, 5436, 5528, 5441, 5486, 5417, 5421)
runs <- c(855, 875, 787, 730, 762, 718, 867, 721, 735, 615, 708, 644, 654, 735,
667, 713, 654, 704, 731, 743, 619, 625, 610, 645, 707, 641, 624, 570,
593, 556)
datos <- data.frame(equipos,numero_bateos,runs)
modelo_lineal <- lm(runs ~ numero_bateos, datos)
# lm() devuelve el valor de la variable y para x=0 (intersección) junto
# con la pendiente de la recta.
# Para ver la información del modelo se requiere summary().
summary(modelo_lineal)
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(corrplot)
corrplot(corr = cor(x = datos, method = "pearson"), method = "number")
equipos <- c("Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.",
"Milwaukee","Colorado","Houston","Baltimore","Los_An.","Chicago",
"Cincinnati","Los_P.","Philadelphia","Chicago","Cleveland","Arizona",
"Toronto","Minnesota","Florida","Pittsburgh","Oakland","Tampa",
"Atlanta","Washington","San.F","San.I","Seattle")
numero_bateos <- c(5659,  5710, 5563, 5672, 5532, 5600, 5518, 5447, 5544, 5598,
5585, 5436, 5549, 5612, 5513, 5579, 5502, 5509, 5421, 5559,
5487, 5508, 5421, 5452, 5436, 5528, 5441, 5486, 5417, 5421)
runs <- c(855, 875, 787, 730, 762, 718, 867, 721, 735, 615, 708, 644, 654, 735,
667, 713, 654, 704, 731, 743, 619, 625, 610, 645, 707, 641, 624, 570,
593, 556)
datos <- data.frame(equipos,numero_bateos,runs)
modelo_lineal <- lm(runs ~ numero_bateos, datos)
# lm() devuelve el valor de la variable y para x=0 (intersección) junto
# con la pendiente de la recta.
# Para ver la información del modelo se requiere summary().
summary(modelo_lineal)
ggplot(data = datos, mapping = aes(x = numero_bateos, y = runs)) +
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersión', x  =  'número  de bateos') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
install.packages("ggplot")
qqnorm(modelo_lineal$residuals)
qqline(modelo_lineal$residuals)
qqnorm(modelo_lineal$residuals)
qqnorm(modelo_lineal$residuals)
qqline(modelo_lineal$residuals)
data(iris)
#Se seleccionan únicamente las variables numéricas
datos <- iris[,c(1,2,3,4)]
head(datos)
pairs(x = datos, lower.panel = NULL)
cor(x = datos, method = "pearson")
library(psych)
multi.hist(x = datos, dcol = c("blue", "red"), dlty = c("dotted", "solid"),
main = "")
library(corrplot)
corrplot(corr = cor(x = datos, method = "pearson"), method = "number")
equipos <- c("Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.",
"Milwaukee","Colorado","Houston","Baltimore","Los_An.","Chicago",
"Cincinnati","Los_P.","Philadelphia","Chicago","Cleveland","Arizona",
"Toronto","Minnesota","Florida","Pittsburgh","Oakland","Tampa",
"Atlanta","Washington","San.F","San.I","Seattle")
numero_bateos <- c(5659,  5710, 5563, 5672, 5532, 5600, 5518, 5447, 5544, 5598,
5585, 5436, 5549, 5612, 5513, 5579, 5502, 5509, 5421, 5559,
5487, 5508, 5421, 5452, 5436, 5528, 5441, 5486, 5417, 5421)
runs <- c(855, 875, 787, 730, 762, 718, 867, 721, 735, 615, 708, 644, 654, 735,
667, 713, 654, 704, 731, 743, 619, 625, 610, 645, 707, 641, 624, 570,
593, 556)
datos <- data.frame(equipos,numero_bateos,runs)
modelo_lineal <- lm(runs ~ numero_bateos, datos)
# lm() devuelve el valor de la variable y para x=0 (intersección) junto
# con la pendiente de la recta.
# Para ver la información del modelo se requiere summary().
summary(modelo_lineal)
ggplot(data = datos, mapping = aes(x = numero_bateos, y = runs)) +
geom_point(color = "firebrick", size = 2) +
labs(title  =  'Diagrama de dispersión', x  =  'número  de bateos') +
geom_smooth(method = "lm", se = TRUE, color = "black") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = datos, aes(x = prediccion, y = residuos)) +
geom_point(aes(color = residuos)) +
scale_color_gradient2(low = "blue3", mid = "grey", high = "red") +
geom_segment(aes(xend = prediccion, yend = 0), alpha = 0.2) +
geom_smooth(se = FALSE, color = "firebrick") +
labs(title = "Distribución de los residuos", x = "predicción modelo",
y = "residuo") +
geom_hline(yintercept = 0) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
install.packages("ggplot2")
install.packages("swirl")
install_from_swirl("Regression Models")
install_from_swirl("Regression Models")
library(swirl)
packageVersion("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
View(galton)
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
library(shiny)
install.packages("shiny")
setwd("C:/Users/Juan Carlos Castillo/Downloads/mercadopublico")
library(quanteda)
setwd("C:/Users/Juan Carlos Castillo/Downloads/mercadopublico")
load("data_corpus_tweets.rda")
tweet_dfm <- dfm(data_corpus_tweets, remove_punct = TRUE)
tag_dfm <- dfm_select(tweet_dfm, pattern = ("#*"))
toptag <- names(topfeatures(tag_dfm, 50))
library("quanteda.textplots")
tag_fcm <- fcm(tag_dfm)
topgat_fcm <- fcm_select(tag_fcm, pattern = toptag)
textplot_network(topgat_fcm, min_freq = 0.1, edge_alpha = 0.8, edge_size = 5)
user_dfm <- dfm_select(tweet_dfm, pattern = "@*")
topuser <- names(topfeatures(user_dfm, 50))
user_fcm <- fcm(user_dfm)
user_fcm <- fcm_select(user_fcm, pattern = topuser)
textplot_network(user_fcm, min_freq = 0.1, edge_color = "orange", edge_alpha = 0.8, edge_size = 5)
View(data_corpus_tweets)
setwd("C:/Repositorios/Otros/textMiningPython")
setwd("C:/Repositorios/Otros/textMiningPython")
dat_csv <- readtext("/gonzalo_text.csv", textfield = "tweet")
library(quanteda)
data_corpus_tweets[["documents"]][["texts"]]
library(quanteda)
library("quanteda.textplots")
dat_csv <- readtext("/gonzalo_text.csv", textfield = "tweet")
dat_csv <- readtext("gonzalo_text.csv", textfield = "tweet")
install.packages("readtext")
library(readtext)
dat_csv <- readtext("gonzalo_text.csv", textfield = "tweet")
summary(corpus(dat_csv), 5)
dat_csv <- readtext("gonzalo_text.csv", textfield = "tweet")
dat_csv <- readtext("gonzalo_text.csv")
View(dat_csv)
dat_csv <- readtext("gonzalo_text.csv",dvsep =';')
View(dat_csv)
dat_csv <- readtext("gonzalo_text.csv",sep =';')
dat_csv <- read.csv(file = 'gonzalo_text.csv.csv', header = TRUE,sep=';')
dat_csv <- read.csv(file = 'gonzalo_text.csv', header = TRUE,sep=';')
View(dat_csv)
summary(corpus(dat_csv), 5)
dat_csv <- read.csv(file = 'gonzalo_text.csv', header = TRUE,sep=';')
summary(corpus(dat_csv), 5)
summary(corpus(dat_csv$tweet), 5)
dfm_inaug <- corpus_subset(dat_csv$tweet, Year <= 1826) %>%
dfm(remove = stopwords('spanish'), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 10, verbose = FALSE)
dfm_inaug <- corpus_subset(dat_csv$tweet) %>%
dfm(remove = stopwords('spanish'), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 10, verbose = FALSE)
corpus_test = corpus(dat_csv$tweet)
dfm_inaug <- corpus_subset(corpus_test) %>%
dfm(remove = stopwords('spanish'), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 10, verbose = FALSE)
textplot_wordcloud(dfm_inaug)
tag_dfm <- dfm_select(dfm_inaug, pattern = ("#*"))
toptag <- names(topfeatures(tag_dfm, 50))
head(toptag)
tag_fcm <- fcm(tag_dfm)
topgat_fcm <- fcm_select(tag_fcm, pattern = toptag)
textplot_network(topgat_fcm, min_freq = 0.1, edge_alpha = 0.8, edge_size = 5)
textplot_network(topgat_fcm, min_freq = 0.1, edge_alpha = 0.8, edge_size = 5)
topgat_fcm <- fcm_select(tag_fcm, pattern = toptag)
user_dfm <- dfm_select(dfm_inaug, pattern = "@*")
topuser <- names(topfeatures(user_dfm, 50))
head(topuser)
user_fcm <- fcm(user_dfm)
user_fcm <- fcm_select(user_fcm, pattern = topuser)
textplot_network(user_fcm, min_freq = 0.1, edge_color = "orange", edge_alpha = 0.8, edge_size = 5)
corpus_subset(corpus_test,
President %in% c("Washington", "Jefferson", "Madison")) %>%
dfm(groups = "President", remove = stopwords("english"), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 5, verbose = FALSE) %>%
textplot_wordcloud(comparison = TRUE)
corpus_subset(corpus_test) %>%
dfm(groups = "President", remove = stopwords("english"), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 5, verbose = FALSE) %>%
textplot_wordcloud(comparison = TRUE)
corpus_subset(corpus_test) %>%
dfm( remove = stopwords("spanish"), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 5, verbose = FALSE) %>%
textplot_wordcloud(comparison = TRUE)
corpus_test%>%
dfm( remove = stopwords("spanish"), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 5, verbose = FALSE) %>%
textplot_wordcloud(comparison = TRUE)
dfm_inaug <- corpus_subset(corpus_test) %>%
dfm(remove = stopwords('spanish'), remove_punct = TRUE) %>%
dfm_trim(min_termfreq = 10, verbose = FALSE)
textplot_wordcloud(dfm_inaug)
textplot_wordcloud(dfm_inaug, min_count = 10,
color = c('red', 'pink', 'green', 'purple', 'orange', 'blue'))
